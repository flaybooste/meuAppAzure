{"version":3,"sources":["components/Home.tsx","components/About.tsx","Routes.tsx","components/Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","About","useState","data","setData","setLoad","a","fetch","response","json","useEffect","fetchData","id","title","description","author","Routes","exact","path","component","Menu","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RASeA,EAPQ,WACf,OACI,2BACA,oC,iCC0BGC,G,MA5BS,WAAM,IAAD,EACDC,qBADC,mBAClBC,EADkB,KACZC,EADY,OAEDF,oBAAS,GAFR,mBAEZG,GAFY,uDAQzB,8BAAAC,EAAA,sEAC4BC,MAAM,yCADlC,cACUC,EADV,gBAEwBA,EAASC,OAFjC,OAEUA,EAFV,OAGIL,EAAQK,GACRJ,GAAQ,GAJZ,4CARyB,sBAczB,OAVAK,qBAAU,WAER,OANuB,mCAKvBC,GACOR,IACN,IAOCA,EAIA,yBAAKS,GAAG,SACJ,yBAAKA,GAAG,QACR,4BAAKT,EAAKU,OACV,2BAAOD,GAAG,QAAQT,EAAKW,aACvB,+BAAQX,EAAKY,UAPV,sCCFAC,EAXU,WACrB,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,SAASC,UAAWlB,O,OCMjCmB,G,MAXQ,WACnB,OACI,6BACK,6BACO,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,aCcLC,EAZO,WAEpB,OACE,kBAAC,IAAD,KACA,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5b5b92c.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nconst Home: React.FC = () =>{\r\n        return(\r\n            <div>\r\n            <h1>Home</h1>\r\n            </div>\r\n        )\r\n}\r\nexport default Home;","import React, {useEffect, useState} from 'react';\r\nimport './static/posts.css';\r\n\r\nconst About: React.FC = () =>{\r\n    const [data, setData] = useState();\r\n    const [load, setLoad] = useState(true);\r\n    \r\n    useEffect(()=> {\r\n      fetchData();\r\n      return data;\r\n    }, [])\r\n    async function fetchData(){\r\n        const response =  await fetch(\"https://dududisse3.azurewebsites.net/\");\r\n        const json =  await response.json()\r\n        setData(json);\r\n        setLoad(false);\r\n    }\r\n    if(!data){\r\n        return <div>...</div>;\r\n    }else{\r\n    return (\r\n        <div id=\"posts\">\r\n            <div id=\"post\">\r\n            <h2>{data.title}</h2>\r\n            <label id=\"desc\">{data.description}</label>\r\n            <label>{data.author}</label>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default About;","import React from 'react';\r\nimport { Switch, Route} from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport About from './components/About';\r\n\r\nconst Routes: React.FC = () =>{\r\n    return(\r\n        <div>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Home}></Route>\r\n                <Route path=\"/about\" component={About}></Route>\r\n            </Switch>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './static/menu.css';\r\n\r\n\r\nconst Menu: React.FC = () =>{\r\n    return(\r\n        <div>\r\n             <nav>   \r\n                    <Link to=\"/\">Home</Link>\r\n                    <Link to=\"/about\">Posts</Link>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu;","import React, {useState} from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport Routes from './Routes';  \nimport {\n  BrowserRouter as Router,\n  Link,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Menu from './components/Menu';\n\nconst App: React.FC = () => {\n\n  return (\n    <Router>\n    <div>\n    <Menu></Menu>\n    <Routes></Routes>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}