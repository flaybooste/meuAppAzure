{"version":3,"sources":["components/Home.tsx","components/About.tsx","Routes.tsx","components/Menu.tsx","components/Rodape.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["About","Container","fixed","Home","useState","data","setData","load","setLoad","a","fetch","method","mode","headers","response","json","useEffect","fetchData","map","key","Fade","in","timeout","Grid","item","xs","Paper","elevation","id","title","console","log","descp","CircularProgress","Routes","exact","path","component","Menus","to","Icon","Avatar","alt","src","Rodape","App","Menu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sSAYeA,EATS,WAChB,OACI,gBAACC,EAAA,EAAD,CAAWC,OAAK,GAChB,2BACA,qC,yEC2DGC,EAtDQ,WAAO,IAAD,EACHC,qBADG,mBACpBC,EADoB,KACdC,EADc,OAEHF,oBAAS,GAFN,mBAEpBG,EAFoB,KAEdC,EAFc,iDAQ3B,8BAAAC,EAAA,sEAEyBC,MAAM,4BAA6B,CACxDC,OAAQ,MACRC,KAAM,OACNC,QAAS,CACP,eAAgB,sBANtB,cAEQC,EAFR,gBASqBA,EAASC,OAT9B,OASQA,EATR,OAUET,EAAQS,GACRP,GAAQ,GAXV,4CAR2B,sBAqB3B,OAjBAQ,qBAAU,WAER,OANyB,mCAKzBC,GACOZ,IACN,IAcEA,EAUD,6BACGA,EAAKa,KAAI,SAACC,GAAD,OACR,kBAAClB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACkB,EAAA,EAAD,CAAMC,IAAKd,EAAMe,QAAS,KACxB,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,IAAE,GACX,kBAACC,EAAA,EAAD,CAAOC,UAAW,GAChB,yBAAKC,GAAG,SACN,yBAAKA,GAAG,QACN,4BAAKT,EAAIU,OACRC,QAAQC,IAAIZ,GACb,2BAAOS,GAAG,QAAQT,EAAIa,YAMhC,kCAxBN,kBAACZ,EAAA,EAAD,CAAMC,GAAId,EAAMe,QAAS,KACvB,kBAACrB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC+B,EAAA,EAAD,SCrBKC,EAXU,WACrB,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOoC,KAAK,SAASC,UAAWlC,O,kEC2BjCmC,EA7BS,WACtB,OACE,6BACE,6BACE,yBAAKV,GAAG,OACN,kBAAC,IAAD,CAAMW,GAAG,KACP,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,QAGJ,kBAAC,IAAD,CAAMD,GAAG,UACP,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,QAGJ,yBAAKZ,GAAG,MACV,kBAAC,IAAD,CAAMW,GAAG,UACL,kBAACE,EAAA,EAAD,CAAQC,IAAI,WAAWC,IAAI,wFCdxBC,EARU,WACrB,OACI,+BCqBOC,EAbO,WAEpB,OACE,kBAAC,IAAD,KACA,6BACA,kBAACC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCRgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.b85276fc.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst About: React.FC = () =>{\r\n        return(\r\n            <Container fixed>\r\n            <div>\r\n            <h1>Home</h1>\r\n            </div>\r\n            </Container>\r\n        )\r\n}\r\nexport default About;","import React, { useEffect, useState } from \"react\";\r\nimport \"./static/posts.css\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {\r\n  Paper,\r\n  Avatar,\r\n  Fade,\r\n  Typography,\r\n  Grid,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\n\r\nconst Home: React.FC = () => {\r\n  const [data, setData] = useState();\r\n  const [load, setLoad] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    return data;\r\n  }, []);\r\n  async function fetchData() {\r\n    // fetch meus dados\r\n    const response = await fetch(\"http://localhost:5000/api\", {\r\n      method: \"GET\",\r\n      mode: \"cors\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const json = await response.json();\r\n    setData(json);\r\n    setLoad(false);\r\n  }\r\n  if (!data) {\r\n    return (\r\n      <Fade in={load} timeout={700}>\r\n        <Container fixed>\r\n          <CircularProgress />\r\n        </Container>\r\n      </Fade>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        {data.map((key: any) => (\r\n          <Container fixed>\r\n            <Fade in={!load} timeout={700}>\r\n              <Grid item xs>\r\n                <Paper elevation={2}>\r\n                  <div id=\"posts\">\r\n                    <div id=\"post\">\r\n                      <h2>{key.title}</h2>\r\n                      {console.log(key)}\r\n                      <label id=\"desc\">{key.descp}</label>\r\n                    </div>\r\n                  </div>\r\n                </Paper>\r\n              </Grid>\r\n            </Fade>\r\n            <br />\r\n          </Container>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Switch, Route} from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport About from './components/About';\r\n\r\nconst Routes: React.FC = () =>{\r\n    return(\r\n        <div>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={About}></Route>\r\n                <Route path=\"/about\" component={Home}></Route>\r\n            </Switch>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./static/menu.css\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport MenuBookIcon from \"@material-ui/icons/MenuBook\";\r\nimport {  Avatar } from \"@material-ui/core\";\r\n\r\nconst Menus: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <nav>\r\n        <div id=\"nav\">\r\n          <Link to=\"/\">\r\n            <Icon>\r\n              <HomeIcon />\r\n            </Icon>\r\n          </Link>\r\n          <Link to=\"/about\">\r\n            <Icon>\r\n              <MenuBookIcon />\r\n            </Icon>\r\n          </Link>\r\n          <div id=\"dv\">\r\n        <Link to=\"/about\">\r\n            <Avatar alt=\"dudufala\" src=\"https://pbs.twimg.com/profile_images/1258209466194878464/ReKm18-q_400x400.jpg\" />\r\n        </Link>  \r\n        </div>\r\n        </div>\r\n        \r\n       \r\n      </nav>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menus;\r\n","import React from 'react';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\n\r\nconst Rodape: React.FC = () =>{\r\n    return(\r\n        <div>\r\n            \r\n            </div>\r\n    )\r\n\r\n}\r\nexport default Rodape;","import React, {useState} from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport Routes from './Routes';  \nimport {\n  BrowserRouter as Router,\n  Link,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Menus from './components/Menu';\nimport Rodape from './components/Rodape';\n\nconst App: React.FC = () => {\n\n  return (\n    <Router>\n    <div>\n    <Menus></Menus>\n    <Routes></Routes>\n    <Rodape></Rodape>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}